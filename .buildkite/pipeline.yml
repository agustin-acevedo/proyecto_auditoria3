# Nodes with values to reuse in the pipeline.
common_params:
  # Common plugin settings to use with the `plugins` key.
  - &common_plugins
    - automattic/a8c-ci-toolkit#2.18.1
  # Common environment values to use with the `env` key.
  - &common_env
    # Be sure to also update the `.xcode-version` file when updating the Xcode image/version here
    IMAGE_ID: xcode-15.1

# This is the default pipeline ‚Äì it will build and test the app
steps:

  #################
  # Create Builds for Testing
  #################
  - group: "üõ† Builds for Testing"
    steps:
      - label: "üõ† :jetpack: Build for Testing"
        key: "build_jetpack"
        command: ".buildkite/commands/build-for-testing.sh jetpack"
        env: *common_env
        plugins: *common_plugins
        artifact_paths:
          - lint.json
        notify:
          - github_commit_status:
              context: "Jetpack Build for Testing"

  - label: "üîç SwiftLint"
    depends_on:
      - step: build_jetpack
        # A SwiftLint error violation will fail the build.
        # This allows this step to run anyway.
        allow_failure: true
    plugins: *common_plugins
    # We cannot run on Docker because we need to download artifact but cannot add our CI pluging in a straightforward way.
    # We cannot use the default queue because it doesn't have Ruby.
    # It would be overkill to use the macOS queue for running a couple of Ruby scripts.
    # So, we're left with the Android queue, even though it looks out of place here.
    #
    # If we were to move forward with this approach, we might want to build a dedicated queue (queue: ruby?) or perhaps a Docker image with the Buildkite CLI available.
    agents:
      queue: android
    command: |
      echo '--- Test Ruby'
      which ruby

      echo "--- :rubygems: Setting up Gems"
      install_gems

      echo "--- üì¶ Download lint result"
      download_artifact lint.json

      echo "--- Annotate PR via Danger"
      bundle exec danger --fail-on-errors=true --remove-previous-comments --danger_id=pr-check --dangerfile=Dangerfile-SwiftLint
    if: "build.pull_request.id != null"
    retry:
      manual:
        permit_on_passed: true
